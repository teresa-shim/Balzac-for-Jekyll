---
layout: post
title: "자바 웹 개발 워크북 3"
date: 2016-09-25 20:54:30 +0900
---

# Chapter 3. 서블릿 프로그래밍
<br>
- 애플리케이션(혹은 데스크톱 애플리케이션): 사용자가 직접 실행시키는 프로그램.
- 웹 애플리케이션: 사용자가 웹 서버를 통해 간접적으로 실행시키는 프로그램.
- CGI(Common Gateway Interface): 웹 서버와 프로그램 사이의 데이터를 주고받는 규칙.
   ->CGI 규칙을 따라 웹 서버와 데이터를 주고 받는 프로그램=CGI 프로그램.

- 컴파일 언어로 작성: 기계어로 번역된 코드를 바로 실행하기 때문에 실행 속도가 빠르지만, 변경사항이 발생할 때 마다 다시 컴파일하고 재배포 해야 한다.
- 스크립트 언어로 작성: 실행할 때마다 코드의 문법을 검증하고 해석해야 하기 때문에 실행 속도가 느리지만, 변경사항이 발생하면 소스 코드를 수정하고 저장하기만 하면 된다.

## 서블릿
 서블릿: 자바로 만든 CGI 프로그램. 단, 웹 서버와 직접 데이터를 주고 받지 않고 전문 프로그램에 의해 관리된다는 점에서 다른 CGI 프로그램과 다르다.

 서블릿 컨테이너: 서블릿의 생성과 실행, 소멸 등 생명주기를 관리하는 프로그램. 서블릿 컨테이너가 서블릿을 대신하여 웹 서버와 주고받기 때문에 개발자가 CGI 규칙을 알 필요가 없다. 대신 서블릿과 컨테이너 사이의 규칙을 알아야 한다.

### Java EE vs. WAS

- Java EE(Enterprise Edition)
기업용 애플리케이션과 클라우드 애플리케이션 개발에 필요한 여러 가지 복합적인 기술을 정의하고 모아놓은 것이다. 기능 확장이 쉽고, 이기종 간의 이식이 쉬우며, 신뢰성과 보안성이 높고, 트랙잭션 관리와 분산 기능을 쉽게 구현할 수 있는 기능을 제공한다.
그 중 서블릿, JSP는 웹을 기반으로 한 클라이언트/서버 기술을 정의하고 있다.

- WAS
WAS(Web Application Server): 서블릿과 서블릿 컨테이너 같이 웹 기술을 기반으로 동작하는 애플리케이션 서버. 특히 Java에서 말하는 WAS란 Java EE 기술 사양을 준수하여 만든 서버를 가리키며 다른 말로 Java EE 구현체 라고도 한다.
상용 제품으로는 JEUS(티맥스소프트), WebLogic(오라클), WebSphere(IBM), JBoss Enterprise(레드햇) 등이 있고 무료 또는 오픈 소스로는 JBoss AS(레드햇), GlassFish(오라클), Geronimo(아파치 재단) 등이 있다.
 Java EE기술 중 서블릿, JSP 등 웹 관련 부분만 구현한 서버를 서블릿 컨테이너 혹은 웹 컨테이너 라고 부른다. 아파치 재단의 톰캣, Caucho의 Resin, 오픈 프로젝트 Jetty 등이 있다. 서블릿이나 JSP 프로그래밍을 할 때에는 사용하는 제품의 버전에 맞추어 API를 사용해야 한다.

 -애플리케이션 서버: C/S 시스템 구조에서 서버 쪽 애플리케이션의 생성과 실행, 소멸을 관리하는 프로그램.
 
### 웹 프로젝트 폴더 구조
- src: 자바 소스 파일을 두는 폴더. 필요한 모든 자바 클래스 파일과 프로퍼티 파일(.properties)을 둔다.
- build/classes: 컴파일된 자바 클래스 파일(.class)이 놓이는 폴더. 패키지에 소속된 클래스의 경우 패키지가 자동으로 만들어진다.
- WebContent: 웹 콘텐츠를 두는 폴더. 웹 애플리케이션을 서버에 배치할 때 그대로 복사된다.
- WebContent/WEB-INF: 웹 애플리케이션의 설정과 관련된 파일을 두는 폴더. 여기 있는 파일은 클라이언트가 요청할 수 없다.
- WebContent/WEB-INF/web.xml: 웹 애플리케이션 배치 설명서 파일. DD(Deployment Descriptor)파일이라고도 부른다.
- WebContent/WEB-INF/lib: 자바 아카이브 파일(.jar, Java ARchive 파일)을 두는 폴더.

### 서블릿 구동 절차
 1. 클라이언트의 요청이 들어오면 서블릿 컨테이너는 서블릿을 찾는다.
 2. 서블릿이 없다면 서블릿 클래스를 로딩하고 인스터스를 준비한 후, 생성자와 초기화 메서드를 호출한다.
 3. 클라이언트 요청을 처리하는 service()메서드를 호출한다.
 4. service()메서드에서 만든 결과를 HTTP 프로토콜에 맞추어 클라이언트에 응답하여 요청처리 완료한다.
 5. 시스템 운영자가 서블릿 컨테이너를 종료하거나 웹 애플리케이션을 종료하면 서블릿 컨테이너는 종료되기 전에 생성된 모든 서블릿에 destroy() 메서드를 호출한다.
