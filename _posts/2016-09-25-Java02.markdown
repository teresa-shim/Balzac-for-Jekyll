---
layout: post
title: "자바 웹 개발 워크북 2"
date: 2016-09-25 17:12:30 +0900
---

# Chapter 2. 웹 프로그래밍의 기초 다지기
<br>

- HTTP: 웹 브라우저와 웹 서버 간의 통신 프로토콜. 클라이언트와 서버 사이에 서비스를 요청하고 응답하는 방식에는 SOAP, RESTful이 있다.
- SOAP: Simple Object Access Protocol
- RESTful: Representational State Transfer

-HTTP 프로토콜 응용 기술

  - WebDAV (World Wide Web Distributed Authoring and Versioning)
  - CalDAV: 캘린더 데이터를 보다 쉽게 편집하고 공유할 수 있도록 WebDAV를 확장한 기술.
  
### HTTP 모니터링
 HTTP프록시가 웹 브라우저와 서버 사이에서 전달 역할.
 -> 둘 사이에 주고 받는 내용을 엿볼 수 있음.
 
### HTTP요청

1: 요청 라인. [메서드] [요청 URL] [HTTP 버전] 형식.

2~7: 요청 헤더. [헤더 이름] : [헤더 값] 형식.

8: 요청 헤더의 끝을 표시. GET요청은 공백 라인, POST요청은 공백 라인+보낼 데이터(message-body)

### HTTP응답

1: 상태 라인. [HTTP 버전] [상태 코드] [상태 설명] 형식.

2~14: 응답 헤더. [헤더 이름] : [헤더 값] 형식.

15: 메시지 헤더와 응답 데이터를 구분하기 위한 공백 라인

16~: 응답 데이터.

## GET요청

특징

- URL에 데이터를 포함하고 있기 때문에 데이터 조회에 적합하다.
- 바이너리 및 대용량 데이터 전송은 불가능하다.
- 요청 라인과 헤드 필드의 최대 크기(HTTP 사양에는 제한사항 없지만 대용량 URL에 의한 문제 때문에 웹 서버에 따라 최대 크기를 제한: Microsoft IIS 6.0: 16KB, Apache 웹 서버: 8KB)

GET 요청이 발생하는 경우

- 웹 브라우저 주소창에 URL을 입력하는 경우.
- 링크를 클릭하는 경우.
- 입력 폼의 method 속성 값이 get인 경우.
 
### GET요청의 데이터 전달 형식

- GET요청의 경우 서버에 보낼 데이터는 URI에 붙인다.
- ?는 서비스 주소와 데이터를, &는 데이터들을, =는 매개변수 이름과 값을 구분하는 구분자이다.

GET요청의 쓰임새: 데이터를 조회하는 경우에 적합하다. URL에 정보를 내포하기 있기 때문에 전달이나 공유가 쉽다. 또한, 페이지로 바로 찾아갈 수 있어 편리하다.

### GET요청의 단점
- 사용자가 입력한 정보가 URL에 그대로 노출되기 때문에 보안 문제가 발생할 수 있다.
- 이미지나 동영상과 같은 바이너리 데이터를 전송하는 것이 불가능하다. BASE 64라는 인코딩 방식을 이용하면 문자화해서 보낼 수는 있지만 URI나 헤더 정보가 너무 크면 웹 서버에서 처리할 수 없기 때문에 어렵다.

## POST 요청

특징
- URL에 데이터가 포함되지 않아 외부에 노출되지 않는다.
- 메시지 본문에 데이터를 포함하기 때문에 실행 결과를 공유할 수 없다.
- 바이너리 및 대용량 데이터 전송이 가능하다.

POST요청의 장점: 데이터가 헤더와 공백라인 후 ‘메시지 본문’ 부분에 위치하기 때문에 URL에 노출되지 않습니다.

POST요청의 단점: URL에 데이터를 포함하지 않기 때문에 요청 결과를 공유할 수 없다.

POST요청의 문제점: 바이너리 데이터를 보낼 때 데이터 안에 &같은 구분자가 포함되면 서버에서 잘못 해석될 수도 있다. 

-> 바이너리 데이터를 보낼 때에는 아주 특별한 방식으로 작성한다.

## 파일 업로드

멀티 파트 인코딩: 웹 서버에 바이너리 데이터를 보내도록 고안된 인코딩 방법.
                 일반 전송 방식과는 Content-Type 헤더와 메시지 본문의 형식이 다르다.
				 
 멀티 파트 전송 방식에서 Content-Type 헤더는 데이터의 미디어 형식과 파트 구분자를 정의한다.
 
 -> 바이너리 데이터를 전송할 때에는 &를 사용하여 매개변수를 구분할 수 없기 때문에 데이터에 파일을 첨부할 때에는 매개변수를 정확히 구분하기 위해 특별한 구분자를 사용한다.
 
 Ex) Content-Type : multipart/form-data; boundary=----Web … PyZ
<br>
       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [엔티티 헤더]  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    [미디어 타입]   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    [파트 구분자]
	
### 멀티 파트 전송의 데이터 형식

 바이너리 데이터를 함께 전송할 때에는 &를 사용하여 매개변수를 구분할 수 없다.
 
 ->Content-Type 헤더의 boundary값이 각각의 매개변수 값을 분리할 깨 사용할 구분자를 정의한 것이다.
 
 이 구분자는 웹 브라우저에서 임의로 생성하는 것으로, 웹 서버는 이를 아용하여 메시지 본문에서 매개변수를 분리하고 해석한다.
 따라서 멀티 파트 형식으로 데이터를 보낼 때는 웹 서버에서도 그에 맞추어 데이터를 분리하고 해석해야 한다.

